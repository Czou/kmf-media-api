/*
 * (C) Copyright 2013 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */
package com.kurento.kmf.media;

import com.kurento.kmf.media.events.MediaErrorListener;
import com.kurento.kmf.media.events.MediaEvent;
import com.kurento.kmf.media.events.MediaEventListener;

/**
 * Base interface for all objects that can be created in the media server.
 * 
 * @author Luis López (llopez@gsyc.es)
 * @author Ivan Gracia (igracia@gsyc.es)
 * @since 2.0.0
 */
public interface MediaObject {

	/**
	 * Explicitly release a media object form memory. All of its children will
	 * also be released
	 * 
	 */
	void release();

	/**
	 * Method used to subscribe to events generated by this media object.
	 * 
	 * @param eventType
	 * @param listener
	 * @return Object to identify the registered listener. This object has to be
	 *         stored by the caller, in order to remove the event listener in
	 *         the future
	 */
	<E extends MediaEvent> ListenerRegistration addListener(String eventType,
			MediaEventListener<E> listener);

	/**
	 * Method used to unsubscribe to events or errors generated by this media
	 * object.
	 * 
	 * @param listenerRegistartion
	 */
	void removeListener(ListenerRegistration listenerRegistartion);

	/**
	 * Adds an error listener to the object. Only one error listener can be
	 * added.
	 * 
	 * @param listener
	 *            The listener that will handle the event
	 * @return Object to identify the registered listener. This object has to be
	 *         stored by the caller, in order to remove the event listener in
	 *         the future
	 */
	ListenerRegistration addErrorListener(MediaErrorListener listener);

	/**
	 * Returns the parent of this media object. The type of the parent depends
	 * on the type of the element that this method is called upon. <li>
	 * MediaPad->MediaElement</li> <li>MediaMixer->MediaPipeline</li> <li>
	 * MediaElement->MediaPipeline</li> <li>MediaPipeline->null</li>
	 * 
	 * @return The parent
	 */
	MediaObject getParent();

	/**
	 * Returns the pipeline to which this MediaObject belong, or the pipeline
	 * itself if invoked over a {@link MediaPipeline}
	 * 
	 * @return The media pipeline for the object, or <code>this</code> in case
	 *         of a media pipeline
	 */
	MediaPipeline getMediaPipeline();

	/**
	 * Explicitly release a media object form memory. All of its children will
	 * also be released
	 * 
	 * @param cont
	 * 
	 */
	void release(final Continuation<Void> cont);

	/**
	 * This method subscribes to events generated by this media object.
	 * 
	 * @param eventType
	 * @param listener
	 * @param cont
	 */
	<E extends MediaEvent> void addListener(final String eventType,
			final MediaEventListener<E> listener,
			final Continuation<ListenerRegistration> cont);

	/**
	 * Removes a media object´s subscription from an event
	 * 
	 * @param listenerRegistration
	 * @param cont
	 */
	void removeListener(ListenerRegistration listenerRegistration,
			Continuation<Void> cont);

	/**
	 * Adds an error listener to the object. Only one error listener can be
	 * added.
	 * 
	 * @param listener
	 *            The listener that will handle the event
	 * @param cont
	 */
	void addErrorListener(final MediaErrorListener listener,
			final Continuation<ListenerRegistration> cont);

	/**
	 * Returns the parent of this media object. The type of the parent depends
	 * on the type of the element that this method is called upon. <li>
	 * MediaPad->MediaElement</li> <li>MediaMixer->MediaPipeline</li> <li>
	 * MediaElement->MediaPipeline</li> <li>MediaPipeline->null</li>
	 * 
	 * @param cont
	 * 
	 */
	<F extends MediaObject> void getParent(final Continuation<F> cont);

	/**
	 * Returns the pipeline to which this MediaObject belongs, or the pipeline
	 * itself if invoked over a {@link MediaPipeline}
	 * 
	 * @param cont
	 *            The media pipeline for the object, or <code>this</code> in
	 *            case of a media pipeline
	 */
	void getMediaPipeline(final Continuation<MediaPipeline> cont);

	/**
	 * Builder for the {@link MediaObject}. This is the base builder for all
	 * objects, and should be extended by instantiable, concrete types.
	 * 
	 * @author Ivan Gracia (igracia@gsyc.es)
	 * @since 2.0.0
	 * 
	 * @param <T>
	 *            Builder type
	 * @param <E>
	 *            Object type
	 */
	interface MediaObjectBuilder<T, E> {

		T withGarbagePeriod(int period);

		E build();

		void buildAsync(Continuation<E> cont);
	}

}
